<?php

    namespace app\models;

    use Yii;
    use yii\helpers\ArrayHelper;

    /**
     * Пользователи
     *
     * @property string serial
     * @property string part
     * @property string comment
     * @property string location
     * @property string nomen           Номенклатура
     *
     * @property int id
     * @property int type
     * @property int id_wh
     * @property int id_parent_tehnic
     * @property int id_org
     * @property int id_user
     * @property int id_model
     * @property int id_new_user
     * @property int date_ct
     * @property int date_upd
     * @property int status
     * @property int status_tehnic
     * @property int hw_depart
     * @property int old_passport
     * @property int date_admission
     * @property string act_num
     * @property int date_warranty
     * @property int balance            На балансе 1с
     *
     *
     * @property int _model
     * @property int _status
     * @property int _wh
     * @property int _org
     *
     */
    class HwTehnic extends ModelInterface
    {

        const SCENARIO_CREATE = 'create';
        const SCENARIO_FAST_CREATE = 'fast-create';
        const SCENARIO_SEARCH_SERIAL = 'search-serial';

        public $id_old_user;
        public $check_serial;
        public $status_tehnic;
        public $id_new_user;
        public $count;
        public $_org;
        public $_model;
        public $_wh;
        public $_status;

        public static function tableName()
        {
            return 'hw_tehnic';
        }


        public function afterFind()
        {
            $this->date_warranty = isset($this->date_warranty)?  date('Y-m-d', $this->date_warranty) : '';
            $this->date_admission = isset($this->date_admission)?  date('Y-m-d', $this->date_admission) : '';
            parent::afterFind(); // TODO: Change the autogenerated stub
        }

        public function rules()
        {
            return [
                [['id_wh', 'id_org', 'id_model'], 'required', 'on' => self::SCENARIO_CREATE],
                [['_wh', '_org', '_model'], 'required', 'on' => self::SCENARIO_FAST_CREATE],
                [['id', 'type', 'id_wh', 'id_org', 'id_user', 'date_ct', 'date_upd', 'old_passport', 'id_model', 'balance', 'hw_depart', 'status'], 'integer', 'message' => 'Необходимо выбрать из списка'],
                [[ 'count', 'id_parent_tehnic'], 'integer'],
                [['date_warranty','date_admission'], 'safe'],
                [['serial', 'old_passport'], 'unique', 'on' => self::SCENARIO_CREATE],
                [['part', 'comment', 'nomen', 'location', 'act_num'], 'string', 'max' => 255],
                [['serial'], 'string'],
                [['check_serial'], 'boolean'],
            ];
        }

        public function attributeLabels()
        {
            return [
                'id' => 'ID',
                'id_wh' => 'Расположение',
                '_wh' => 'Расположение',
                'type' => 'Тип устройства',
                'id_org' => 'Организация',
                '_org' => 'Организация',
                'id_user' => 'Пользователь',
                'date_ct' => 'Дата добавления',
                'date_upd' => 'Дата обновления',
                'id_model' => 'Устройство',
                '_model' => 'Устройство',
                'serial' => 'Серийный номер',
                'part' => 'Номер партии',
                'comment' => 'Комментарий',
                'location' => 'Местонахождение',
                'date_admission' => 'Дата приемки',
                'date_warranty' => 'Гарантия',
                'act_num' => 'Номер акта приема-передачи оборудования',
                'old_passport' => 'Старый № паспорта',
                'status' => 'Статус',
                '_status' => 'Статус',
                'check_serial' => 'Серийный номер отсутствует',
                'balance' => 'На балансе',
                'nomen' => 'Номенклатура',
                'hw_depart' => 'Принадлежность к отделу',
                'count' => 'Количество',
            ];
        }


        public function getWh()
        {
            return $this->hasOne(HwWh::className(), ['id' => 'id_wh']);
        }

        public function getOrg()
        {
            return $this->hasOne(HwPodr::className(), ['id' => 'id_org']);
        }

        public function getDepart()
        {
            return $this->hasOne(HwDepart::className(), ['id' => 'hw_depart']);
        }

        public function getUser()
        {
            return $this->hasOne(HwUsers::className(), ['id' => 'id_user']);
        }

        public function getModel()
        {
            return $this->hasOne(HwModel::className(), ['id' => 'id_model']);
        }

        public function getTypeDevice()
        {
            return $this->hasOne(HwDeviceType::className(), ['id' => 'type']);
        }

        public function getHwTehnicStatus()
        {
            return $this->hasOne(HwTehnicStatus::className(), ['id' => 'status']);
        }

        public function getRam()
        {
            return $this->hasOne(HwTehnicRam::className(), ['id' => 'id_tehnic']);
        }

        public static function getPassport($id)
        {
            return str_pad($id, 4, '0', STR_PAD_LEFT);
        }


        public function getStatus()
        {
            $story = new HwStory();
            $status = $story::STATUS_UPDATE;

            $wh = $this->id_wh;
            $old_wh = $this->getOldAttribute('id_wh');

            $user = $this->id_user;
            $old_user = $this->getOldAttribute('id_user');


            if ($user <> $old_user) {
                $status = $story::STATUS_MOVE;
            }

            if ($wh <> $old_wh) {
                $status = $story::STATUS_WH;
            }

            if ($this->status <> $this->getOldAttribute('status'))
                $status = $story::STATUS_CHANGE_STATUS;

            return $status;
        }



        public function getTehnicByUserId(){
            if ($this->existsByUserId())
                return self::find()->joinWith(['model', 'typeDevice'])->where(['id_user' => $this->id_user])->asArray()->all();
            return false;
        }


        public function existsByUserId(){
            return self::find()->where(['id_user' => $this->id_user])->exists();
        }


        public function getTehnicStatus(){
            return [
                3 => 'Хранение на складе',
                2 => 'Эксплуатация',
            ];
        }


        public static function existsRam($id)
        {
            return HwTehnicRam::find()->where(['id_tehnic' => $id])->exists();
        }


        public function reOrder()
        {
            $tehnic = HwTehnic::find()->where(['id_user' => $this->id_user])->all();

            foreach ($tehnic as $item) {
                $upd = HwTehnic::findOne($item->id);
                $upd->id_user = $this->id_new_user;
                $upd->id_wh = $this->id_wh ? $this->id_wh : $upd->id_wh;
                $upd->status_tehnic = 2;
                $upd->date_upd = strtotime("now");
                $upd->save();
                HwStory::addStory($upd);
            }
        }


        public function setTehnic($update = null)
        {
            $new_id_wh = null;
            $status = null;
            try {
                if ($this->attributes != $this->oldAttributes) {

                    if ($this->attributes['id_wh'] != $this->oldAttributes['id_wh'])
                        $new_id_wh = $this->attributes['id_wh'] != $this->oldAttributes['id_wh'] ?  $this->attributes['id_wh'] : null;
                        $status = $this->attributes['status'] != $this->oldAttributes['status'] ?  $this->attributes['status'] : null;

                    if (!isset($update)) {
                        $this->date_ct = strtotime("now");
                    }

                    if ($this->attributes['id_user'] != $this->oldAttributes['id_user'])
                        $this->date_upd = strtotime("now");

                    $this->type = HwModel::findOne($this->id_model)->type;
                    $this->hw_depart = Yii::$app->user->identity->hw_depart;
                    $this->date_admission = $this->date_admission ? strtotime($this->date_admission) : null;
                    $this->date_warranty =  $this->date_warranty ? strtotime($this->date_warranty) : null;
                    if ($this->getSave()) {
                        $this->id_wh = $new_id_wh;
                        $this->status = $status;
                        HwStory::addStory($this); //Добавялем историю
                        return true;
                    }
                }
            } catch (\Exception $ex) {
                ShowError::getError('danger', $ex->getMessage());
                echo "<pre>";
                print_r($ex->getMessage());
                die();
            }
            return false;
        }


        public function getTehnicByUser(){
            return self::find()
                ->joinWith(['typeDevice', 'model'])
                ->where(['id_user' => $this->id_user])->all();
        }

        public function getTehnic($user = null)
        {

            $hw_depart = new HwDepart();


            $query = self::find()
                ->joinWith(['model', 'depart', 'hwTehnicStatus', 'typeDevice'])
                ->orderBy(['date_ct' => SORT_DESC])
                ->andWhere(['in', 'hw_depart', $hw_depart->getAccessReadAndWrite(1)]);

            if (Yii::$app->user->can('Service'))
                $query->andWhere(['in', 'hw_device_type.category', 3]);


            if (isset($user))
                $query->andWhere(['hw_tehnic.id_user' => $user]);

            return $query->limit(150)->all();
        }


        public function getOldTehnic($user)
        {
            $model_story = HwStory::find()->where(['id_user' => $user])->limit(15)->select(['id_tehnic'])->asArray()->column();
            $model_tehnic = HwTehnic::find()->where(['id_user' => $user])->limit(15)->select(['id'])->asArray()->column();

            $hw_depart = new HwDepart();


            if ($model_story) {
                return self::find()->orderBy(['date_ct' => SORT_DESC])->andFilterWhere(['in', 'id', $model_story])->andFilterWhere(['not in', 'id', $model_tehnic])->andWhere(['in', 'hw_depart', $hw_depart->getAccessReadAndWrite(1)])->all();
            }

            return null;
        }


        public static function getIdDepartList($org, $id_depart = null)
        {
            $actual_list = null;
            if ($org) {
                if ($id_depart) {
                    $actual_list = HwPodr::url(HwPodr::findOne($org)->name, $id_depart)->Result;
                } else {
                    $actual_list = isset(HwPodr::url(HwPodr::findOne($org)->name)->Result) ? HwPodr::url(HwPodr::findOne($org)->name)->Result : null;
                }
            }

            if ($actual_list) {
                $_depart = ArrayHelper::map($actual_list, 'ID', 'ID');

                $depart = HwPodr::find()->select(['id'])->where(['id_depart' => $_depart])->orderBy(['name' => SORT_DESC])->column();

                return $depart;
            }
            return false;

        }


        public static function getDepartList($org, $id_depart = null)
        {

            $depart = new HwPodr();
            $depart->org = $org;
            $depart->id_depart = $id_depart;


            $actual_list = $depart->departByApi();

            $_depart = ArrayHelper::map($actual_list, 'ID', 'ID');

            $depart = HwPodr::find()->select(['id'])->where(['id_depart' => $_depart])->column();

            $_users = HwUsers::find()->where(['id_depart' => $depart])->all();
            $user_id = ArrayHelper::map($_users, 'id', 'id');
            $user_username = ArrayHelper::map($_users, 'id', 'id_depart');

            return [
                HwTehnic::find()->joinWith(['user'])->where(['id_user' => $user_id])->all(), $actual_list, $depart, $user_username

            ];
        }

    }
